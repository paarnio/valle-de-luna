% partFeedMachines_B.dl
% COPY OF: PartFeedingMachineAllocation/partFeedingMachineAllocation1.dl
% 2018-06-07 A+B Toimii 
% PROJECT: PartFeedingConfigurationAndAllocation
% PROJECT TARGET: Running Part Feeding capability configuration generation (partFeedCapaConf_A.dl)
% and machine allocation (partFeedMachines_B.dl) to provide all of the simple capabilities 
% of this configuration at the same time. 
%
% INPUT: Part feeding capability configuration (Hansson Fig.6)
% generated by partFeedCapaConf_A.dl (=partFeedCapaConfigurator2.dl)
% OUTPUT: allocation of a machine providing all the simple capabilities
% required by the input capability configuration
% MACHINES: Two types of part feeding machines (Hansson Fig.5):
% VibratoryBowlFeeder and FlexibleFeeder
% See paper:
% Hansson, J‰rvenp‰‰. 2017. 'Modeling Capabilities for 
% Functional Configuration of Part Feeding Equipment' Fig 5-6.
% Myll‰rniemi, V. 2014 'Using Answer Set Programming 
% for feature model representation and configuration' Fig 2.
% See also code:
% capability configuration: partFeedCapaConfigurator2.dl
% machine allocation: phone_assembly_combcapa_4.dl
% -------------------------

% --- MACHINES & COMPONENTS See Hansson Fig 5.
machine(1). 
machine(2).

hasMacType(1,vibraBowlFeeder). 
hasMacType(2,flexibleFeeder).

% available machine types
machineType(vibraBowlFeeder).
machineType(flexibleFeeder).

compoType(bowl_vbf).
compoType(baseunit_vbf).
compoType(camera_ff).
compoType(partdispenser_ff).
compoType(baseunit_ff).

hasCompoType(vibraBowlFeeder,bowl_vbf).
hasCompoType(vibraBowlFeeder,baseunit_vbf).

hasCompoType(flexibleFeeder,camera_ff).
hasCompoType(flexibleFeeder,partdispenser_ff).
hasCompoType(flexibleFeeder,baseunit_ff).

% --- POSSIBLE CAPABILITIES
% - Level 1
capability(partFeeding).
% - Level 2
capability(structuring).
% - Level 3
capability(physicalSingu).
capability(informationalSingu).
capability(storaging).
capability(vibrationalConvey).
capability(orientationRecog).
capability(physicalOrient).
% - Level 4
capability(positionRec).
capability(partRec).
capability(vibrationTrans).
capability(vibrating).

% --- MACHINES SIMPLE CAPABILITIES
% - vibraBowlFeeder
hasCapa(bowl_vbf,physicalOrient).
hasCapa(bowl_vbf,physicalSingu).
% TEST: If the next hasCapa() line is commented out (storing capa removed), 
% config 1 requires that both machines are allocated for the task 
hasCapa(bowl_vbf,storaging).
hasCapa(bowl_vbf,vibrationTrans).
hasCapa(baseunit_vbf,vibrating).
% - flexibleFeeder
hasCapa(camera_ff,positionRec).
hasCapa(camera_ff,partRec).
hasCapa(camera_ff,orientationRecog).
hasCapa(partdispenser_ff,storaging).
hasCapa(partdispenser_ff,vibrationTrans).
hasCapa(baseunit_ff,vibrating).
hasCapa(baseunit_ff,vibrationTrans).

hasCapa(Mt,C) :- hasCapa(Ct,C),hasCompoType(Mt,Ct), machineType(Mt), compoType(Ct), capability(C).

% NOT NEEDED WHEN EXECUTED TOGETHER WITH CONFIGURATOR partFeedCapaConf_A.dl
% ---- INPUT: REQUIRED CAPABILITY CONFIGURATION
% generated by: partFeedCapaConfigurator2.dl

% CONFIG 1 (machine(1) vibraBowlFeeder provides all these capabilities)
%reqSimpleCapa(storaging).
%reqSimpleCapa(vibrationTrans).
%reqSimpleCapa(vibrating).
%reqSimpleCapa(physicalSingu).
%reqSimpleCapa(physicalOrient).

% CONFIG 2 (machine(2) flexibleFeeder provides all these capabilities)
%reqSimpleCapa(storaging).
%reqSimpleCapa(vibrationTrans).
%reqSimpleCapa(vibrating).
%reqSimpleCapa(orientationRecog).
%reqSimpleCapa(positionRec).
%reqSimpleCapa(partRec).

% ---- MACHINE ALLOCATION ----
% allocate machine(s) (code based on phone_assembly_combcapa_4.dl) 

alloc(M,C1) | notAlloc(M,C1) :- reqSimpleCapa(C1),hasCapa(Mt,C1),machineType(Mt),machine(M),hasMacType(M,Mt).
% exactly one machine allocated for one interface-(simple)capability
:- #count{M:alloc(M,C1)}<1,reqSimpleCapa(C1).
:- #count{M:alloc(M,C1)}>1,reqSimpleCapa(C1).

% SOFT CONSTRAINT: Cost for using two machines to do the combined assembly task (d3: oli M1<>M2)
:~ alloc(M1,C1),alloc(M2,C2),machine(M1),machine(M2),capability(C1),capability(C2),M1<M2. [1:1]
 



