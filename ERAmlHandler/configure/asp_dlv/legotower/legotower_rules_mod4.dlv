% legotower_rules_mod4.dlv
% ==============
% TOIMII
% 2017-04-28 MODIFYING structure: each lego has interface types (not instances).
% legotower program divided into two separate files: facts .dlv & rules .db
%
% ----- MANUAL --
% http://www.dlvsystem.com/html/DLV_User_Manual.html
% -n=<n>        Compute at most <n> stable models (-n=0 and -n=all give all).
% -N=<N>        Limit integers to [0,<N>].
% -silent -filter=predicate1 -filter=predicate2
% ----- RUNNING in powershell ./dlv ---
% dlv>./dlv.mingw.exe -silent -filter=mainbranch -filter=subbranch -n=1 ./work/legotower_rules_mod4.dlv ./work/legotower_facts_mod4.db
% NOTE: #maxint defined in this program -> parameter -N=10 cannot be used in command
% (pakki #maxint = 2 . pakki #int(X1).)
% ============ Lego Tree ==============
% Defined in .db facts file
% Mainbranch legos 1-8
% 1. Subbranch legos 6-7
% 2. Subbranch lego 9
%
%	LEGOTREE	LEVEL
%   | 8 - 8 |		: 6
%   | 9 | 5 - 5 |	: 5
%		| 4 | 6 |	: 4
%		| 3 | 7 |	: 3
%		| 2 |		: 2
%		| 1 |		: 1
% 
% -----------------------------------
%
%			INTERFACE TYPE
%			/			\
%		bottomi			topi
%		/	\			/	\
%	botA	botC	topA	topC
%
%----------------------------------
%  In mainbranch: Level defined the order of construction. It can grow only upwards
%  In subbranch: should be constructed separately also in level order and connected to the main branch when ready.
% --- THIS IS THE RULES FILE .dlv (FACTS are in .db file)
% ----Interfaces----
% in facts.db
% ----Lego has interfaces
% in facts.db
% ---- Interface linkions ------
% in facts.db

% #maxint = 15. MOVED TO .db file

% --- Connected Legos ------
%  Legos that have a link between their interfaces are connected
%  Note: connected is symmetric relation (link is directed relation)
%--- NEW --- now simplified
connected(L1,L2):- link(L1,I1,L2,I2),lego(L1),lego(L2),interface(I1),interface(I2).
% is symmetric:
connected(L2,L1):- connected(L1,L2),lego(L1),lego(L2).

%----- Mainbranch ----------
% Mainbranch of a legotree. Starting from base lego leg1
% base(leg1). MOVED TO .db file

mainbranch(L) :- base(L), lego(L).
%--- NEW --- now simplified ( TODO: if correctly linked, also (..topi(I1), bottomi(I2)) could be removed.
mainbranch(L2) :- mainbranch(L1), lego(L1), lego(L2), link(L1,I1,L2,I2), topi(I1), bottomi(I2).

%---- LEGO LEVEL ------
% lego can be at one level only (ERISUURI ? mikä symboli)
:- level(Lego,L1), level(Lego, L2), lego(Lego), L1!=L2.

% Level of a lego L2: baselego at level 1

level(Lego,1) :- base(Lego), lego(Lego).
%--- NEW --- now simplified 
level(L2,Lev2) :- link(L1,I1,L2,I2), lego(L1), lego(L2), level(L1,Lev1), Lev2 = Lev1+1.


% ----Subbranch legos------
subbranch(L2) :- not mainbranch(L2), mainbranch(L1), connected(L1,L2), lego(L2), lego(L2).
subbranch(L3) :- not mainbranch(L3), subbranch(L2), connected(L2,L3), lego(L2), lego(L3).

% level of subbranch legos L1 under a mainbranch lego L2
%--- NEW --- now simplified
level(L1,Lev1) :- link(L1,I1,L2,I2), subbranch(L1), mainbranch(L2), lego(L1), lego(L2), level(L2,Lev2), Lev1 = Lev2-1, Lev1>0.

% level of subbranch legos L1 under a subbranch lego L2
%--- NEW --- now simplified
level(L1,Lev1) :- link(L1,I1,L2,I2), subbranch(L1), subbranch(L2), lego(L1), lego(L2), level(L2,Lev2), Lev1 = Lev2-1, Lev1>0.

% --- END RULES (FACTS in .db file) ------



