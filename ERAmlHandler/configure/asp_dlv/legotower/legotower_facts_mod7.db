% legotower_facts_mod7.db 
% ===================
% (BOTH FILES: legotower_rules_mod7.dlv AND legotower_facts_mod7.db are needed in reasoning)
% MOD7 TOIMII
% APRIORI ASSUMPTIONS AND REQUIREMENTS:
% - REQ: #maxint needs to be AT LEAST 2xlegocount+2 (See. zenlevel calculations)
% - EITHER BASE LEGOS (pred: base(lego) in .db)(One or many at the lowest hight level) 
% - OR one SOMELEGO (pred: somelego(lego) in .db) ought to be defined as facts.
% - LEGO TYPE hierarchy discribed in Fig 1. is assumed.
% - i.e the lego types should be from the set (square; rectangle)
% - INTERFACE TYPE hierarchy discribed in Fig 2. is assumed.
% - i.e. lego linkage facts (pred: link(leg1,topA,leg2,botA)) should specify 
% - a lego interface to be from the set (topA; topC; botA; botC)
% SOME NOTES:
% - Defined base legos (pred: base(lego) in .db) ought to be at the same, lowest hight level (1).
% - If baselegos are defined, mainbranches of the legotree are constructed upwards from them.
% - If baselegos are NOT defined, mainbranches of the legotree are constructed upwards from 'zenbaselego's.
% - ('zenbaselego's are the lowest level legos at zenlevel hierarchy)
% - (this means that, if the set of base legos contains all the lowest level (1) legos, 
% - the generated mainbranches (and subbrances) are identical with those genereted without
% - any base legos specified.)
% - SOMELEGO (pred:somelego(leg)) is the starting point of calculating the relative hight levels (zenlevels))  
% ---------------------------------------  
%  
% 2017-06-05 MODIFYING: link facts is not needed to be directed from top to bottom interface.
% Rules in .dlv generate directed links (dlink-predicate) from the indirected (link-predicate)
% 2017-04-28 MODIFYING structure: each lego has interface types (not instances).
% legotower program divided into two separate files: facts .dlv & rules .db
% ----- MANUAL --
% http://www.dlvsystem.com/html/DLV_User_Manual.html
% -n=<n>        Compute at most <n> stable models (-n=0 and -n=all give all).
% -N=<N>        Limit integers to [0,<N>].
% ----- run in powershell ./dlv
% dlv>./dlv.mingw.exe -silent -filter=mainbranch -filter=subbranch -filter=subbranchinterface -n=1 ./work/legotower_rules_mod7.dlv ./work/legotower_facts_mod7.db
% ./dlv.mingw.exe -silent -nofacts -N=10 -n=1 ./work/legotower_rules_mod4.txt ./work/legotower_facts_mod4.db
% pakki #maxint = 2 .
% pakki #int(X1) .
% ============ Lego Tree ==============
% Mainbranch legos 1-8
% Subbranch legos 6-7, 9-11
% Base legos 1 and 15
%
%			LEGOTREE	LEVEL
%		    | 8 - 8 |		: 6
%	 | -11- | 9 | 5 - 5 |	: 5
%	 |12 | -10- | 4 | 6 |	: 4
%	 |13 |		| 3 | 7 |	: 3
%	 |14 |		| 2 |		: 2
%	 |15 |		| 1 |		: 1
% 
% -----------------------------------
%  In mainbranch: Level defined the order of construction. It can grow only upwards
%  In subbranch: should be constructed separately also in level order and 
%  connected to the main branch when ready.
% ---------------------------------
%		lego		
%		/	\		
%	square	rectangle
%
% ----------------------------
%			INTERFACE TYPE
%			/			\
%		bottomi			topi
%		/	\			/	\
%	botA	botC	topA	topC
%
%----------------------------------

% REQ: #maxint needs to be AT LEAST 2xlegocount+2 (See. zenlevel calculations) 
#maxint = 40.

middleheight(X) :- M = #maxint,#int(X),X=M/2.

% --- Legos ------
% in main branch
square(leg1). square(leg2). square(leg3). square(leg4). 
rectangle(leg5). rectangle(leg8). 
% in sub branch
square(leg6). square(leg7). square(leg9).
square(leg12). square(leg13). square(leg14). square(leg15).
rectangle(leg10). rectangle(leg11).

% -- EITHER BASE LEGOS OR ONE SOMELEGO NEED TO BE DEFINED
% -- BASE LEGOS (One or many at the lowest level) 
% base(leg1). base(leg15).
 base(leg1).
% -- SOME LEGO (one) 
% somelego(leg8).

%----Interfaces----
%- NEW: legos can share the interface types (botA, botC, topA, topC)


% --- UNDIRECTED AND DIRECTED INTERFACE LINKS ------
%  Note: link(L1,I1,L2,I2) is undirected link between two lego interfaces
%  links are the facts defined in .db file
%  NOTE: dlink(L1,I1,L2,I2) is (upward) directed relation from 
%  the top interface to bottom interface. dlinks are defined by rules in(.dlv)

% ---- Interface links ------
% links between interfaces are NOT directed.
% links require Lego identification.
% link(LEGO1,TOP_INT_TYPE, LEGO2,BOTTOM_INT_TYPE)
link(leg1,topA,leg2,botA). link(leg2,topA,leg3,botA). link(leg3,topA,leg4,botA).
link(leg4,topA,leg5,botA). link(leg6,topA,leg5,botC). link(leg7,topA,leg6,botA).
link(leg5,topA,leg8,botC). link(leg9,topA,leg8,botA).
% NEW  
link(leg10,topC,leg9,botA). link(leg10,topA,leg11,botC).

link(leg15,topA,leg14,botA). link(leg14,topA,leg13,botA). link(leg13,topA,leg12,botA). link(leg12,topA,leg11,botA).

% --- END FACTS (RULES in .dlv file) ------
