<rdf:RDF xmlns="http://siima.net/ontologies/2017/caex/" 
	xml:base="http://siima.net/ontologies/2017/caex/"
	xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#"
	xmlns:owl="http://www.w3.org/2002/07/owl#"
    xmlns:rdfs="http://www.w3.org/2000/01/rdf-schema#"
	xmlns:xsd="http://www.w3.org/2001/XMLSchema#"
	xmlns:siima="http://siima.net/ontologies/2017/caex/"
	xmlns:amlont="http://data.ifs.tuwien.ac.at/aml/ontology#">
	#* 2018-07-02 vmFile_ihierarchy_caex3_ontogen.vm
	NOTE: A vmFile for CAEX 3.0 ontology transformation
	NOTE:  CHANGE: In CAEX 3.0 Value and DefaultValue of Attributes is type String
	NOTE: Thus, $AnyValueHelper is not needed.
	NOTE: New parameter libcategory added to $URIHelper.createInstanceUri()
	$URIHelper.createInstanceUri(libcategory, instanceOwlType, hierarchy, iElement, instanceName)
	(For Older CAEX 2.5 version 2017-09-25 vmFile_ihierarchy_ontogen.vm)
	NOTE: 2017-09-26 TEST: imports caex-ontology statement added
	NOTE: 2017-09-25 internalElement property added for InternalElement and InstanceHierarchy
	NOTE: 2017-06-28 Ontology definition added (option: imports statement (Protege cannot open))
	NOTE: VelocityContext is expected to be initiated with  JAXB object CAEXFile caex
	with key "caexfile" in the constructor of VeloContainer (vcontext.put("caexfile", caex))
	NOTE: $AnyValueHelper.getAnyTypeContent() is called with JAXB type parameter (NOT OWL)
	NOTE: $URIHelper.createInstanceUri() is called with OWL Type parameter (NOT JAXB)
	2017-06-09 CALLING MY OWN CLASS(AnyTypeValueHelper) METHOD: putVelocityContext("AnyValueHelper", anyContentHelper); 
	Helper method for finding out Attributes Value's content: now [Value: null]
	2017-05-28 FOR STRING FUNCTIONS PUT StringUtils class TO CONTEXT: $StringUtils
	SEE: "StringUtils", org.apache.commons.lang3.StringUtils.class
	SEE: https://stackoverflow.com/questions/6998412/velocity-string-function
	2017-05-29 CALLING MY OWN CLASS(UriHelper) METHOD:putVelocityContext("UriHelper", helper) 
	SEE: https://stackoverflow.com/questions/20786403/calling-a-java-method-in-velocity-template
	SEE: https://stackoverflow.com/questions/6914312/calling-macro-function-in-velocity-template
	NOTE:"To get rid of spaces and blank lines use multi-line comments"
	*#
	#set( $amlns = 'http://data.ifs.tuwien.ac.at/aml/ontology#')
	#set( $xsdns = 'http://www.w3.org/2001/XMLSchema#')
	#set( $siimans = 'http://siima.net/ontologies/2017/caex/')
	
	## NEW: caex ontology uri contains no hash char
	#set( $amlonto = 'http://data.ifs.tuwien.ac.at/aml/ontology')
	
	## 2018-07-02 NEW: value for the parameter libcategory for $URIHelper.createInstanceUri()
	#set( $libcategory = 'InstanceHierarchy')
	
	#*--------------------
		   Ontology
	----------------------*#
	 <owl:Ontology rdf:about="${siimans}">
		##OPTION
        <owl:imports rdf:resource="${amlonto}"/>
    </owl:Ontology>
	#*--------------------
		   CAEXFile
	----------------------*#
	## -- CAEXFile --
	#set( $URIhelp = $UriHelper.createInstanceUri($libcategory,"CAEXFile",null,null,"$caexfile.FileName") )
	<owl:NamedIndividual rdf:about="${URIhelp}">
		<rdf:type rdf:resource="${amlns}CAEXFile"/>
		<amlont:fileName rdf:datatype="${xsdns}string">$caexfile.FileName</amlont:fileName>
	</owl:NamedIndividual>

	#*--------------------
	   InstanceHierarchy
	----------------------*#
	## -- InstanceHierarchy --
	#foreach ($ih in $caexfile.getInstanceHierarchy())
	#set( $URIhelp = $UriHelper.createInstanceUri($libcategory,"InstanceHierarchy","$ih.Name",null,"$ih.Name") )
	<owl:NamedIndividual rdf:about="${URIhelp}">
		<rdf:type rdf:resource="${amlns}InstanceHierarchy"/>
		<amlont:name rdf:datatype="${xsdns}string">$ih.Name</amlont:name>
		## -- internalElement property ---
		## This is a reference to InternalElement children
		#foreach ($iechild in $ih.InternalElement)
		#set( $URIchild = $UriHelper.createInstanceUri($libcategory,"InternalElement","$ih.Name","$iechild.Name", "$iechild.Name") )
		<amlont:internalElement rdf:resource="${URIchild}"/>
		#end				
	</owl:NamedIndividual>		
    #end
	
	#*--------------------
		InternalElement
	----------------------*#
	
	## -- InternalElement --
	#foreach ($ih in $caexfile.getInstanceHierarchy())
       #foreach ($ie in $ih.InternalElement)
	#walkIElements($ie, $ih)
		#end		
    #end

	## --Recursive walk through InternalElements--
	## NOTE: $URIHelper.createInstanceUri() is called with OWL Type parameter (NOT JAXB)
	#macro(walkIElements $node $ihierarchy)
	#set( $sucref = $node.RefBaseSystemUnitPath )
	#set( $SUCrep = $StringUtils.replace($sucref,"/","_") )
	#set( $URIhelp = $UriHelper.createInstanceUri($libcategory,"InternalElement","$ihierarchy.Name","$node.Name", "$node.Name") )
	<owl:NamedIndividual rdf:about="${URIhelp}">
		<rdf:type rdf:resource="${amlns}InternalElement"/>
		<amlont:name rdf:datatype="${xsdns}string">$node.Name</amlont:name>
		<amlont:iD rdf:datatype="${xsdns}string">$node.ID</amlont:iD>
		#if ($SUCrep)
		#set( $URIhelp = $UriHelper.createInstanceUri($libcategory,"SystemUnitClass","$ihierarchy.Name","$node.Name", "$SUCrep") )
		<amlont:refBaseSystemUnitPath rdf:resource="${URIhelp}"/>
		#end
		## -- attribute property --
		#foreach ($att in $node.getAttribute())
		#set( $URIhelp = $UriHelper.createInstanceUri($libcategory,"Attribute","$ihierarchy.Name","$node.Name", "$att.Name") )
		<amlont:attribute rdf:resource="${URIhelp}"/>
		#end
		## -- roleRequirements property --
		## NOTE: in schema v. 2.15 RoleRequirements is a single object (Not a list of RoleRequirements like in the new v3.0)
		## TODO in future for v3.0 add a foreach loop (Velocity provides a loop counter reference $velocityCount)
		#set( $rreq = $node.getRoleRequirements())
		#if ($rreq)
		#set( $URIhelp = $UriHelper.createInstanceUri($libcategory,"RoleRequirements","$ihierarchy.Name","$node.Name", "RR1") )
		<amlont:roleRequirements rdf:resource="${URIhelp}"/>
		#end
		## -- internalElement property ---
		## This is a reference to InternalElement children
		#foreach ($iechild in $node.InternalElement)
		#set( $URIchild = $UriHelper.createInstanceUri($libcategory,"InternalElement","$ihierarchy.Name","$iechild.Name", "$iechild.Name") )
		<amlont:internalElement rdf:resource="${URIchild}"/>
		#end				
	</owl:NamedIndividual>	
	#if ($node.InternalElement.size() > 0)
		#foreach ($child in $node.InternalElement)
	#walkIElements($child $ihierarchy)
		#end
	#end
	#end
	## -- macro end
	
	#*--------------------
		  Attribute
	----------------------*#
	
	
	## -- Attribute --
	#foreach ($ih in $caexfile.getInstanceHierarchy())
       #foreach ($ie in $ih.InternalElement)
			#walkIElementsForAttributes($ie $ih)
		#end		
    #end
	
	## --Recursive attribute creation from all InternalElements--
	## NOTE: For CAEX 3.0 REMOVE: $AnyValueHelper.getAnyTypeContent() is called with JAXB type parameter (NOT OWL)
	## NOTE: $URIHelper.createInstanceUri() is called with OWL Type parameter (NOT JAXB)
	#macro(walkIElementsForAttributes $node $ihierarchy)
		#foreach ($att in $node.getAttribute())
		#set( $ATTValue = $att.Value )
		#set( $ATTDefValue = $att.DefaultValue)
		#set( $URIhelp = $UriHelper.createInstanceUri($libcategory,"Attribute","$ihierarchy.Name","$node.Name", "$att.Name") )
		<owl:NamedIndividual rdf:about="${URIhelp}">
		<rdf:type rdf:resource="${amlns}Attribute"/>
			<amlont:name rdf:datatype="${xsdns}string">$att.Name</amlont:name>
			<amlont:attributeDataType rdf:datatype="${xsdns}string">$att.AttributeDataType</amlont:attributeDataType>
		#if ($ATTDefValue)
		<amlont:defaultValue rdf:datatype="${xsdns}string">$ATTDefValue</amlont:defaultValue>
		#end
		<amlont:value rdf:datatype="${xsdns}string">$ATTValue</amlont:value>
		</owl:NamedIndividual>
		#end
	#if ($node.InternalElement.size() > 0)
		#foreach ($child in $node.InternalElement)
		#walkIElementsForAttributes($child $ihierarchy)
		#end
	#end	
	#end
	## -- macro end

	#*--------------------
		ExternalInterface
	----------------------*#
		
	## -- ExternalInterface -- (rdfs:subClassOf InterfaceClass)
	## NOTE: $AnyValueHelper.getAnyTypeContent() is called with JAXB type parameter (NOT OWL)
	## NOTE: $URIHelper.createInstanceUri() is called with OWL Type parameter (NOT JAXB)
	## In JAXB:InternalElement extends SystemUnitClassType
	## which has property externalInterface.
	## In JAXB: ExternalInterface is type InterfaceClassType
	#foreach ($ih in $caexfile.getInstanceHierarchy())
       #foreach ($ie in $ih.InternalElement)
		#walkIEForEInterface($ie $ih)
		#end		
    #end
	
	## --Recursive ExternalInterface creation from all InternalElements--
	#macro(walkIEForEInterface $node $ihierarchy)
	#set( $nodeName = $node.Name )
	## - ExternalInterfaces in InternalElement
	#foreach ($extint in $node.getExternalInterface())
	#set( $URIhelp = $UriHelper.createInstanceUri($libcategory,"ExternalInterface","$ihierarchy.Name","$nodeName", "$extint.Name") )
	#set( $RBCPath = $extint.getRefBaseClassPath() )
	<owl:NamedIndividual rdf:about="${URIhelp}">
	<rdf:type rdf:resource="${amlns}ExternalInterface"/>
	<amlont:name rdf:datatype="${xsdns}string">$extint.Name</amlont:name>
	<amlont:iD rdf:datatype="${xsdns}string">$extint.ID</amlont:iD>
	<amlont:refBaseClassPath rdf:datatype="${xsdns}string">$RBCPath</amlont:refBaseClassPath>				
	</owl:NamedIndividual>
	#end
	## - ExternalInterfaces in RoleRequirements in InternalElement
	## Note: in old schema 2.15 InternalElement can have only one RoleRequirements object
	#set( $rreq = $node.getRoleRequirements())
	#if ($rreq)
	#set( $RRstr = "-RoleReq1" )	
	#foreach ($extint in $rreq.getExternalInterface())				
	#set( $URIhelp = $UriHelper.createInstanceUri($libcategory,"ExternalInterface","$ihierarchy.Name","$nodeName$RRstr", "$extint.Name") )
	#set( $RBCPath = $extint.getRefBaseClassPath() )
	<owl:NamedIndividual rdf:about="${URIhelp}">
	<rdf:type rdf:resource="${amlns}ExternalInterface"/>
	<amlont:name rdf:datatype="${xsdns}string">$extint.Name</amlont:name>
	<amlont:iD rdf:datatype="${xsdns}string">$extint.ID</amlont:iD>
	<amlont:refBaseClassPath rdf:datatype="${xsdns}string">$RBCPath</amlont:refBaseClassPath>				
	</owl:NamedIndividual>
	#end
	#end
	
	#if ($node.InternalElement.size() > 0)
		#foreach ($child in $node.InternalElement)
		#walkIEForEInterface($child $ihierarchy)
		#end
	#end	
	#end
	## -- macro end
	
	#*--------------------
		InternalLink
	----------------------*#
	
	## -- InternalLink -- (rdfs:subClassOf CAEXObject)
	#foreach ($ih in $caexfile.getInstanceHierarchy())
       #foreach ($ie in $ih.InternalElement)
		#walkIEForInternalLink($ie $ih)
		#end		
    #end
	
	## --Recursive InternalLink creation from all InternalElements--
	#macro(walkIEForInternalLink $node $ihierarchy)
		#foreach ($intlink in $node.getInternalLink())
	#set( $ILINKName = $intlink.Name )
	#set( $ILNamerep = $StringUtils.replace($ILINKName," ","_") )
	#set( $LinkURIhelp = $UriHelper.createInstanceUri($libcategory,"InternalLink","$ihierarchy.Name","$node.Name", "$ILNamerep") )
	#set( $RPSideA = $intlink.getRefPartnerSideA() )
	#set( $RPSideB = $intlink.getRefPartnerSideB() )
	## NEW TEST: RefPartnerSide is Old version 2.15 reference OR New 3.0 reference
	## OLD SCHEMA VERSION 2.15 reference RefPartnerSide consists of (InternalElement's_ID:EInterface's_Name)(separator':')
	## NEW VERSION FOR SCHEMA 3.0 reference RefPartnerSide consists ONLY of ExternalInterface's ID
	#set( $OVCond = $StringUtils.contains($RPSideA,":") )
		#if($OVCond)					
		## Calling a sub macro
		#set( $SideURI = "" )
		#macroReferedExtIntURI($RPSideA $ihierarchy $SideURI)
		#set( $SideAURI = $SideURI )
		#else
		##**** NEW VERSION ***
		#set( $SideURI = "" )
		#macroNEWReferedExtIntURI($RPSideA $ihierarchy $SideURI)
		#set( $SideAURI = $SideURI )
		#end
	
	#set( $OVCond = $StringUtils.contains($RPSideB,":") )
		#if($OVCond)					
		#set( $SideURI = "" )
		#macroReferedExtIntURI($RPSideB $ihierarchy $SideURI)
		#set( $SideBURI = $SideURI )
		#else
		##**** NEW VERSION ***
		#set( $SideURI = "" )
		#macroNEWReferedExtIntURI($RPSideB $ihierarchy $SideURI)
		#set( $SideBURI = $SideURI )
		#end
	<owl:NamedIndividual rdf:about="${LinkURIhelp}">
	<rdf:type rdf:resource="${amlns}InternalLink"/>
	<amlont:name rdf:datatype="${xsdns}string">$intlink.Name</amlont:name>
	## refPartnerSideA and B are owl:ObjectProperties
	<amlont:refPartnerSideA rdf:resource="${SideAURI}"/> 
	<amlont:refPartnerSideB rdf:resource="${SideBURI}"/> 
	##TEST<amlont:TEMPSideA rdf:datatype="${xsdns}string">$SideAURI</amlont:TEMPSideA>
	##TEST<amlont:TEMPSideB rdf:datatype="${xsdns}string">$RPSideB</amlont:TEMPSideB>
	</owl:NamedIndividual>
	#end
	#if ($node.InternalElement.size() > 0)
		#foreach ($child in $node.InternalElement)
		#walkIEForInternalLink($child $ihierarchy)
		#end
	#end	
	#end
	## -- macro end
	
	## -- ExternalInterface URIs Referenced in InternalLink --
	## OLD SCHEMA VERSION 2.15 reference RefPartnerSide consists of (InternalElement's_ID:EInterface's_Name)
	## See: https://stackoverflow.com/questions/6914312/calling-macro-function-in-velocity-template
	## "To get rid of spaces and blank lines use multi-line comments"
	## "preferably an externally defined result variable can be passed 'by reference'"
	#macro(macroReferedExtIntURI $RPSide $ihierarchy $SideURI)
		#if($SideURI)
		## Parsing link reference refPartnerSide
		#set( $Cond = $StringUtils.contains($RPSide,":") )
		#if($Cond)				
	## First part of link reference is InternalElement's_ID
	#set( $IElemID = $StringUtils.split($RPSide,":")[0] )
	## Second part of link reference is EInterface's_Name
	#set( $EIntName = $StringUtils.split($RPSide,":")[1] )
	#set( $IEFound = "" )
	#set( $IHReturn = "" )
	##macroFindExtInt($ihierarchy $IElemID $EIntName $IEFound $IHReturn)
	#macroFindExtInt($IElemID $IEFound $IHReturn)
	#if( $IEFound != "" )
	#set( $ExtIntURIhelp = $UriHelper.createInstanceUri($libcategory,"ExternalInterface","$IHReturn","$IEFound", "$EIntName") )
	#set( $SideURI = $ExtIntURIhelp )
	#end
	#if( $SideURI == "" )					
	#set( $SideURI = "EXTERNAL_INTERFACE_NOT_FOUND" )
	#end
	#end
	#end
	#end
	## -- macro end
	
	##macro(macroFindExtInt $ihierarchy $IElemID $EIntName $IEFound $IHReturn)
	#macro(macroFindExtInt $IElemID $IEFound $IHReturn)
		## Param: $ihierarchy AND $EIntName NOT in USE
		#if($IEFound)
	## TEMP set( $IEFound = "TESTING_TESTING" )
	## -- SEARCHING REFERENCED InternalElement containing the ExternalInterface
	#set( $IEReturn = "" )
	#set( $IHReturn = "" )
	#foreach ($ih in $caexfile.getInstanceHierarchy())
	#if( $IHReturn == "" )
	#foreach ($ie in $ih.InternalElement)
	#if( $IEReturn == "" )
	#recursiveSearchIElementsWithID($ie $ih $IElemID $IEReturn $IHReturn)
	#end
	#if( $IEReturn != "" )
	#set( $IEFound = $IEReturn )				
	#end
	#end
	#end				
	#end
	#end
	#end
	## -- macro end
	
	#macro(recursiveSearchIElementsWithID $node $ih $IElemID $IEReturn $IHReturn)
	## 
	#if($IEReturn)
	##set( $IEReturn = "RECURSIVE_TESTING" )
	#set( $ThisID = $node.getID())
	#set( $ThisName = $node.getName())
	#set( $ThisHierarcyName = $ih.getName())
	##set( $IEReturn = "$IEReturn$ThisID" )
	#if($IElemID == $ThisID)
	##set( $IEReturn = "FOUND_FOUND_RECURSIVE_TESTING" )
	#set( $IEReturn = $ThisName )
	#set( $IHReturn = $ThisHierarcyName )
	#end
	#end
	#if ($node.InternalElement.size() > 0)
	#foreach ($child in $node.InternalElement)
	#recursiveSearchIElementsWithID($child $ih $IElemID $IEReturn $IHReturn)
	#end
	#end	
	#end
	## -- macro end
	
	## -- NEW MACRO FOR searching ExternalInterface URIs Referenced in InternalLink --
	## NEW VERSION FOR SCHEMA 3.0 reference RefPartnerSide consists ONLY of ExternalInterface's_ID
	## See: https://stackoverflow.com/questions/6914312/calling-macro-function-in-velocity-template
	## "preferably an externally defined result variable can be passed 'by reference'"
	#macro(macroNEWReferedExtIntURI $RPSide $ihierarchy $SideURI)
	## $RPSide contains the ID of an ExternalInterface
    #foreach ($node in $ihierarchy.InternalElement)
		#if($SideURI=="")
		#recursiveNEWReferedExtIntURI($RPSide $ihierarchy $node $SideURI)
		#end
	#end		
    #end
	## -- macro end
	
	## --Recursive Search For ExternalInterfaces by their ID from all InternalElements and RoleRequirements--
	#macro(recursiveNEWReferedExtIntURI $RPSide $ihierarchy $node $SideURI )
	## - ExternalInterfaces in InternalElement
	#if($SideURI=="")
	#foreach ($extint in $node.getExternalInterface())
	#if($RPSide == $extint.ID)
	#set( $URIhelp = $UriHelper.createInstanceUri($libcategory,"ExternalInterface","$ihierarchy.Name","$node.Name", "$extint.Name") )
	#set( $SideURI = $URIhelp )
	#end
	#end
	## - ExternalInterfaces in RoleRequirements in InternalElement
	## Note: in old schema 2.15 InternalElement can have only one RoleRequirements object
	#set( $rreq = $node.getRoleRequirements())
	#if ($rreq)
	#foreach ($extint in $rreq.getExternalInterface())
	#if($RPSide == $extint.ID)
	#set( $nodeName = $node.Name )
	#set( $RRstr = "-RoleReq1" )
	#set( $URIhelp = $UriHelper.createInstanceUri($libcategory,"ExternalInterface","$ihierarchy.Name","$nodeName$RRstr", "$extint.Name") )
	#set( $RBCPath = $extint.getRefBaseClassPath() )
	#set( $SideURI = $URIhelp )
	#end
	#end
	#end
	#if($SideURI=="")
	#if ($node.InternalElement.size() > 0)
		#foreach ($child in $node.InternalElement)
		#recursiveNEWReferedExtIntURI($RPSide $ihierarchy $child $SideURI )
		#end
	#end
	#end	
	#end
	#end
	## -- macro end
	
	
</rdf:RDF>