<rdf:RDF xmlns="http://siima.net/ontologies/2017/caex/" 
	xml:base="http://siima.net/ontologies/2017/caex/"
	xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#"
	xmlns:owl="http://www.w3.org/2002/07/owl#"
	xmlns:rdfs="http://www.w3.org/2000/01/rdf-schema#"
	xmlns:xsd="http://www.w3.org/2001/XMLSchema#"
	xmlns:siima="http://siima.net/ontologies/2017/caex/"
	xmlns:amlont="http://data.ifs.tuwien.ac.at/aml/ontology#">
	#* 2018-06-30 vmFile_atttypelib_caex3_ontogen.vm
	NOTE: AttributeTypeLib to OWL Ontology
	NOTE: in CAEX 3.0 Value is type String, so $AnyValueHelper not needed
	NOTE: New parameter libcategory added to $URIHelper.createInstanceUri()
	$URIHelper.createInstanceUri(libcategory, instanceOwlType, hierarchy, iElement, instanceName)		
	(old version Caex 2.51 2017-06-26 based on vmFile_roleclasslib_ontogen.vm)
	 NOTE: 2017-09-25 roleClass property added for RoleClass and RoleClassLib
	 NOTE: VelocityContext is expected to be initiated with  JAXB object CAEXFile caex
	 with key "caexfile" in the constructor of VeloContainer (vcontext.put("caexfile", caex))
	 NOTE: in Caex 2.51 $AnyValueHelper.getAnyTypeContent() is called with JAXB type parameter (NOT OWL)
	 NOTE: $URIHelper.createInstanceUri() is called with OWL Type parameter (NOT JAXB)
	 2017-06-09 CALLING MY OWN CLASS(AnyTypeValueHelper) METHOD: putVelocityContext("AnyValueHelper", anyContentHelper); 
	 Helper method for finding out Attributes Value's content: now [Value: null]
	 2017-05-28 FOR STRING FUNCTIONS PUT StringUtils class TO CONTEXT: $StringUtils
	 SEE: "StringUtils", org.apache.commons.lang3.StringUtils.class
	 SEE: https://stackoverflow.com/questions/6998412/velocity-string-function
	 2017-05-29 CALLING MY OWN CLASS(UriHelper) METHOD:putVelocityContext("UriHelper", helper) 
	 SEE: https://stackoverflow.com/questions/20786403/calling-a-java-method-in-velocity-template
	 *#
	
	
	#set( $amlns = 'http://data.ifs.tuwien.ac.at/aml/ontology#')
	#set( $xsdns = 'http://www.w3.org/2001/XMLSchema#')
	## 2018-07-02 NEW: value for libcategory parameter in $URIHelper.createInstanceUri()
	#set( $libcategory = 'AttributeTypeLib')
	
	#*--------------------
			CAEXFile
	----------------------*#
	
	## -- CAEXFile --
	#set( $URIhelp = $UriHelper.createInstanceUri($libcategory,"CAEXFile",null,null,"$caexfile.FileName") )
	<owl:NamedIndividual rdf:about="${URIhelp}">
		<rdf:type rdf:resource="${amlns}CAEXFile"/>
		<amlont:fileName rdf:datatype="${xsdns}string">$caexfile.FileName</amlont:fileName>
	</owl:NamedIndividual>

	#*--------------------
		AttributeTypeLib (Hierarchy)
	----------------------*#
	
	## -- AttributeTypeLib --
	#foreach ($atttlib in $caexfile.getAttributeTypeLib())
	#set( $URIhelp = $UriHelper.createInstanceUri($libcategory,"AttributeTypeLib","$atttlib.Name",null,"$atttlib.Name") )
	<owl:NamedIndividual rdf:about="${URIhelp}">
		<rdf:type rdf:resource="${amlns}AttributeTypeLib"/>
		<amlont:name rdf:datatype="${xsdns}string">$atttlib.Name</amlont:name>
		## -- TODO: ADD TO ONTOLOGY attributeType property ---
		## This is a reference to roleClass children
		#foreach ($atttchild in $atttlib.AttributeType)
		#set( $URIchild = $UriHelper.createInstanceUri($libcategory,"AttributeType","$atttlib.Name","$atttchild.Name", "$atttchild.Name") )
		<amlont:attributeType rdf:resource="${URIchild}"/>
		#end				
	</owl:NamedIndividual>		
	#end
	
	#*--------------------
		AttributeType in AttributeTypeLib
	----------------------*#
	
	## -- SystemUnitClass --
	#foreach ($atttlib in $caexfile.getAttributeTypeLib())
		#foreach ($attype in $atttlib.AttributeType)
	#walkAttributeTypes($attype, $atttlib)
		#end		
	#end

	## --Recursive walk through AttributeTypes (JAXB Type AttributeFamilyType? )--
	## NOTE: $URIHelper.createInstanceUri() is called with OWL Type parameter (NOT JAXB)
	#macro(walkAttributeTypes $node $hierarchy)
	#set( $rbasecref = $node.RefBaseClassPath )
	#set( $BASECrep = $StringUtils.replace($rbasecref,"/","_") )
	#set( $URIhelp = $UriHelper.createInstanceUri($libcategory,"AttributeType","$hierarchy.Name","$node.Name", "$node.Name") )
	<owl:NamedIndividual rdf:about="${URIhelp}">
		<rdf:type rdf:resource="${amlns}AttributeType"/>
		<amlont:name rdf:datatype="${xsdns}string">$node.Name</amlont:name>
		#if($node.ID)
			<amlont:iD rdf:datatype="${xsdns}string">$node.ID</amlont:iD>
		#end		
		#* refBaseClassPath is owl:DatatypeProperty
		?Which value format to use: 1) orig reference rbasecref with slashes OR 2) replaced by underlines BASECrep
		*#
		#if($BASECrep)
			<amlont:refBaseClassPath rdf:datatype="${xsdns}string">$rbasecref</amlont:refBaseClassPath>
		#end		
		## -- attribute property --
		#foreach ($att in $node.getAttribute())
			#set( $URIhelp = $UriHelper.createInstanceUri($libcategory,"Attribute","$hierarchy.Name","$node.Name", "$att.Name") )
			<amlont:attribute rdf:resource="${URIhelp}"/>
		#end
		## -- attributeType property ---
		## This is a reference to roleClass children
		#foreach ($atttchild in $node.AttributeType)
		#set( $URIchild = $UriHelper.createInstanceUri($libcategory,"AttributeType","$hierarchy.Name","$atttchild.Name", "$atttchild.Name") )
		<amlont:attributeType rdf:resource="${URIchild}"/>
		#end				
	</owl:NamedIndividual>	
	#if ($node.AttributeType.size() > 0)
		#foreach ($child in $node.AttributeType)
			#walkAttributeTypes($child $hierarchy)
		#end
	#end
	#end
	## -- macro end
	
	
	#*--------------------
		  Attribute in in attributeType in AttributeTypeLib
	----------------------*#	
	## -- Attribute --
	#foreach ($atttlib in $caexfile.getAttributeTypeLib())
		#foreach ($attype in $atttlib.AttributeType)
			#walkIElementsForATTLibAttributes($attype $atttlib)
		#end		
	#end
	
	## --Recursive attribute creation from all attributeType--
	## NOTE: in CAEX 3.0 Value is type String, so $AnyValueHelper not needed
	## NOTE: $URIHelper.createInstanceUri() is called with OWL Type parameter (NOT JAXB)
	#macro(walkIElementsForATTLibAttributes $node $hierarchy)
		#foreach ($att in $node.getAttribute())
				#set( $URIhelp = $UriHelper.createInstanceUri($libcategory,"Attribute","$hierarchy.Name","$node.Name", "$att.Name") )
				<owl:NamedIndividual rdf:about="${URIhelp}">
				<rdf:type rdf:resource="${amlns}Attribute"/>
					<amlont:name rdf:datatype="${xsdns}string">$att.Name</amlont:name>
					<amlont:attributeDataType rdf:datatype="${xsdns}string">$att.AttributeDataType</amlont:attributeDataType>
					#if ($att.getDefaultValue)
						<amlont:defaultValue rdf:datatype="${xsdns}string">$att.DefaultValue</amlont:defaultValue>
					#end
					<amlont:value rdf:datatype="${xsdns}string">$att.Value</amlont:value>
				</owl:NamedIndividual>
		#end
	#if ($node.AttributeType.size() > 0)
		#foreach ($child in $node.AttributeType)
			#walkIElementsForATTLibAttributes($child $hierarchy)
		#end
	#end	
	#end
	## -- macro end

	
</rdf:RDF>