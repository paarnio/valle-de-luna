<rdf:RDF xmlns="http://siima.net/ontologies/2017/caex/" 
	xml:base="http://siima.net/ontologies/2017/caex/"
	xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#"
	xmlns:owl="http://www.w3.org/2002/07/owl#"
	xmlns:rdfs="http://www.w3.org/2000/01/rdf-schema#"
	xmlns:xsd="http://www.w3.org/2001/XMLSchema#"
	xmlns:siima="http://siima.net/ontologies/2017/caex/"
	xmlns:amlont="http://data.ifs.tuwien.ac.at/aml/ontology#">
	#* 2018-07-02 vmFile_roleclasslib_caex3_ontogen.vm
	A vmFile for CAEX 3.0 ontology transformation
	CHANGE: In CAEX 3.0 Value and DefaultValue of Attributes is type String
	Thus, $AnyValueHelper is not needed. 
	(For Older CAEX 2.5 version 2017-06-26 vmFile_roleclasslib_ontogen.vm
	 NOTE: 2017-09-25 roleClass property added for RoleClass and RoleClassLib
	 (BASED ON: 2017-06-12 vmFile_systemunitclasslib_ontogen.vm)
	 (BASED ON: 2017-06-11 vmFile_ihierarchy_ontogen.vm) 
	 NOTE: VelocityContext is expected to be initiated with  JAXB object CAEXFile caex
	 with key "caexfile" in the constructor of VeloContainer (vcontext.put("caexfile", caex))
	 NOTE: $AnyValueHelper.getAnyTypeContent() is called with JAXB type parameter (NOT OWL)
	 NOTE: $URIHelper.createInstanceUri() is called with OWL Type parameter (NOT JAXB)
	 2017-06-09 CALLING MY OWN CLASS(AnyTypeValueHelper) METHOD: putVelocityContext("AnyValueHelper", anyContentHelper); 
	 Helper method for finding out Attributes Value's content: now [Value: null]
	 2017-05-28 FOR STRING FUNCTIONS PUT StringUtils class TO CONTEXT: $StringUtils
	 SEE: "StringUtils", org.apache.commons.lang3.StringUtils.class
	 SEE: https://stackoverflow.com/questions/6998412/velocity-string-function
	 2017-05-29 CALLING MY OWN CLASS(UriHelper) METHOD:putVelocityContext("UriHelper", helper) 
	 SEE: https://stackoverflow.com/questions/20786403/calling-a-java-method-in-velocity-template
	 *#
	
	
	#set( $amlns = 'http://data.ifs.tuwien.ac.at/aml/ontology#')
	#set( $xsdns = 'http://www.w3.org/2001/XMLSchema#')
	
	#*--------------------
			CAEXFile
	----------------------*#
	
	## -- CAEXFile --
	#set( $URIhelp = $UriHelper.createInstanceUri("CAEXFile",null,null,"$caexfile.FileName") )
	<owl:NamedIndividual rdf:about="${URIhelp}">
		<rdf:type rdf:resource="${amlns}CAEXFile"/>
		<amlont:fileName rdf:datatype="${xsdns}string">$caexfile.FileName</amlont:fileName>
	</owl:NamedIndividual>

	#*--------------------
		RoleClassLib (Hierarchy)
	----------------------*#
	
	## -- SystemUnitClassLib --
	#foreach ($roleclib in $caexfile.getRoleClassLib())
	#set( $URIhelp = $UriHelper.createInstanceUri("RoleClassLib","$roleclib.Name",null,"$roleclib.Name") )
	<owl:NamedIndividual rdf:about="${URIhelp}">
		<rdf:type rdf:resource="${amlns}RoleClassLib"/>
		<amlont:name rdf:datatype="${xsdns}string">$roleclib.Name</amlont:name>
		## -- roleClass property ---
		## This is a reference to roleClass children
		#foreach ($rcchild in $roleclib.RoleClass)
		#set( $URIchild = $UriHelper.createInstanceUri("RoleClass","$roleclib.Name","$rcchild.Name", "$rcchild.Name") )
		<amlont:roleClass rdf:resource="${URIchild}"/>
		#end				
	</owl:NamedIndividual>		
	#end
	
	#*--------------------
		RoleClass in RoleClassLib
	----------------------*#
	
	## -- SystemUnitClass --
	#foreach ($roleclib in $caexfile.getRoleClassLib())
		#foreach ($rolec in $roleclib.RoleClass)
	#walkRoleClasses($rolec, $roleclib)
		#end		
	#end

	## --Recursive walk through RoleClass (JAXB Type RoleClassType)--
	## NOTE: $URIHelper.createInstanceUri() is called with OWL Type parameter (NOT JAXB)
	#macro(walkRoleClasses $node $hierarchy)
	#set( $rbasecref = $node.RefBaseClassPath )
	#set( $BASECrep = $StringUtils.replace($rbasecref,"/","_") )
	#set( $URIhelp = $UriHelper.createInstanceUri("RoleClass","$hierarchy.Name","$node.Name", "$node.Name") )
	<owl:NamedIndividual rdf:about="${URIhelp}">
		<rdf:type rdf:resource="${amlns}RoleClass"/>
		<amlont:name rdf:datatype="${xsdns}string">$node.Name</amlont:name>
		#if($node.ID)
			<amlont:iD rdf:datatype="${xsdns}string">$node.ID</amlont:iD>
		#end		
		#* refBaseClassPath is owl:DatatypeProperty
		?Which value format to use: 1) orig reference rbasecref with slashes OR 2) replaced by underlines BASECrep
		*#
		#if($BASECrep)
			<amlont:refBaseClassPath rdf:datatype="${xsdns}string">$rbasecref</amlont:refBaseClassPath>
		#end		
		## -- attribute property --
		#foreach ($att in $node.getAttribute())
			#set( $URIhelp = $UriHelper.createInstanceUri("Attribute","$hierarchy.Name","$node.Name", "$att.Name") )
			<amlont:attribute rdf:resource="${URIhelp}"/>
		#end
		## -- roleClass property ---
		## This is a reference to roleClass children
		#foreach ($rcchild in $node.RoleClass)
		#set( $URIchild = $UriHelper.createInstanceUri("RoleClass","$hierarchy.Name","$rcchild.Name", "$rcchild.Name") )
		<amlont:roleClass rdf:resource="${URIchild}"/>
		#end				
	</owl:NamedIndividual>	
	#if ($node.RoleClass.size() > 0)
		#foreach ($child in $node.RoleClass)
			#walkRoleClasses($child $hierarchy)
		#end
	#end
	#end
	## -- macro end
	
	#*--------------------
		NO(?) InternalElement in RoleClass in RoleClassLib
	----------------------*#	
	#*--------------------
		  Attribute in in RoleClass in RoleClassLib
	----------------------*#	
	## -- Attribute --
	#foreach ($roleclib in $caexfile.getRoleClassLib())
		#foreach ($rolec in $roleclib.RoleClass)
			#walkIElementsForAttributes($rolec $roleclib)
		#end		
	#end
	
	## --Recursive attribute creation from all RoleClass--
	## NOTE:  For CAEX 3.0 REMOVE: $AnyValueHelper.getAnyTypeContent() is called with JAXB type parameter (NOT OWL)
	## NOTE: $URIHelper.createInstanceUri() is called with OWL Type parameter (NOT JAXB)
	#macro(walkIElementsForAttributes $node $hierarchy)
		#foreach ($att in $node.getAttribute())
				#set( $ATTValue = $att.Value )
				#set( $ATTDefValue = $att.DefaultValue )
				#set( $URIhelp = $UriHelper.createInstanceUri("Attribute","$hierarchy.Name","$node.Name", "$att.Name") )
				<owl:NamedIndividual rdf:about="${URIhelp}">
				<rdf:type rdf:resource="${amlns}Attribute"/>
					<amlont:name rdf:datatype="${xsdns}string">$att.Name</amlont:name>
					<amlont:attributeDataType rdf:datatype="${xsdns}string">$att.AttributeDataType</amlont:attributeDataType>
					#if ($ATTDefValue)
						<amlont:defaultValue rdf:datatype="${xsdns}string">$ATTDefValue</amlont:defaultValue>
					#end
					<amlont:value rdf:datatype="${xsdns}string">$ATTValue</amlont:value>
				</owl:NamedIndividual>
		#end
	#if ($node.RoleClass.size() > 0)
		#foreach ($child in $node.RoleClass)
			#walkIElementsForAttributes($child $hierarchy)
		#end
	#end	
	#end
	## -- macro end

	#*--------------------
		ExternalInterface in RoleClass
	----------------------*#
		
	## -- ExternalInterface -- (rdfs:subClassOf InterfaceClass)
	## NOTE: $URIHelper.createInstanceUri() is called with OWL Type parameter (NOT JAXB)
	## In JAXB:RoleClassType extends CAEXObject
	## RoleClassType has a property externalInterface.
	## In JAXB: ExternalInterface is type InterfaceClassType
	#foreach ($roleclib in $caexfile.getRoleClassLib())
		#foreach ($rolec in $roleclib.RoleClass)
			#walkIEForEInterface($rolec $roleclib)
		#end		
	#end
	
		
	## --Recursive ExternalInterface creation of all RoleClasses
	#macro(walkIEForEInterface $node $hierarchy)
		#foreach ($extint in $node.getExternalInterface())
				
				#set( $URIhelp = $UriHelper.createInstanceUri("ExternalInterface","$hierarchy.Name","$node.Name", "$extint.Name") )
				#set( $RBCPath = $extint.getRefBaseClassPath() )
				<owl:NamedIndividual rdf:about="${URIhelp}">
				<rdf:type rdf:resource="${amlns}ExternalInterface"/>
					<amlont:name rdf:datatype="${xsdns}string">$extint.Name</amlont:name>
					<amlont:iD rdf:datatype="${xsdns}string">$extint.ID</amlont:iD>
					<amlont:refBaseClassPath rdf:datatype="${xsdns}string">$RBCPath</amlont:refBaseClassPath>				
				</owl:NamedIndividual>
		#end
	#if ($node.RoleClass.size() > 0)
		#foreach ($child in $node.RoleClass)
			#walkIEForEInterface($child $hierarchy)
		#end
	#end	
	#end
	## -- macro end
	
	#*--------------------
		NO(?) InternalLink in RoleClass 
	----------------------*#	
</rdf:RDF>