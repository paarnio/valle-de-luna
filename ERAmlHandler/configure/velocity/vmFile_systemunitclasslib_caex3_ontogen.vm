<rdf:RDF xmlns="http://siima.net/ontologies/2017/caex/" 
	xml:base="http://siima.net/ontologies/2017/caex/"
	xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#"
	xmlns:owl="http://www.w3.org/2002/07/owl#"
	xmlns:rdfs="http://www.w3.org/2000/01/rdf-schema#"
	xmlns:xsd="http://www.w3.org/2001/XMLSchema#"
	xmlns:siima="http://siima.net/ontologies/2017/caex/"
	xmlns:amlont="http://data.ifs.tuwien.ac.at/aml/ontology#">
	#* 2018-07-02 vmFile_systemunitclasslib_caex3_ontogen.vm
	A vmFile for CAEX 3.0 ontology transformation
	CHANGE: In CAEX 3.0 Value and DefaultValue of Attributes is type String
	Thus, $AnyValueHelper is not needed.
	NOTE: New parameter libcategory added to $URIHelper.createInstanceUri()
	$URIHelper.createInstanceUri(libcategory, instanceOwlType, hierarchy, iElement, instanceName)
	NOTE: 2018-07-04 Attribute Constraints transform
	NOTE: IMPORTANT: Velocity variables will keep the old value. 
	"At the end of the loop set the variable to false"
	Or before you set its value like this:
		#set( $Scaled = false )
		#set( $Scaled = $constraint.getOrdinalScaledType() )
		#if ($Scaled)
	
	(For Older CAEX 2.5 version 2017-09-25 vmFile_systemunitclasslib_ontogen.vm
	 NOTE: ODO: TEST :2017-09-25 systemUnitClass property added for SystemUnitClass
	 (BASED ON: 2017-06-11 vmFile_ihierarchy_ontogen.vm) 
	 NOTE: VelocityContext is expected to be initiated with  JAXB object CAEXFile caex
	 with key "caexfile" in the constructor of VeloContainer (vcontext.put("caexfile", caex))
	 NOTE: $AnyValueHelper.getAnyTypeContent() is called with JAXB type parameter (NOT OWL)
	 NOTE: $URIHelper.createInstanceUri() is called with OWL Type parameter (NOT JAXB)
	 2017-06-09 CALLING MY OWN CLASS(AnyTypeValueHelper) METHOD: putVelocityContext("AnyValueHelper", anyContentHelper); 
	 Helper method for finding out Attributes Value's content: now [Value: null]
	 2017-05-28 FOR STRING FUNCTIONS PUT StringUtils class TO CONTEXT: $StringUtils
	 SEE: "StringUtils", org.apache.commons.lang3.StringUtils.class
	 SEE: https://stackoverflow.com/questions/6998412/velocity-string-function
	 2017-05-29 CALLING MY OWN CLASS(UriHelper) METHOD:putVelocityContext("UriHelper", helper) 
	 SEE: https://stackoverflow.com/questions/20786403/calling-a-java-method-in-velocity-template
	 *#
	
	## 2018-07-02 NEW: value for libcategory parameter in $URIHelper.createInstanceUri()
	#set( $libcategory = 'SystemUnitClassLib')
	
	#set( $amlns = 'http://data.ifs.tuwien.ac.at/aml/ontology#')
	#set( $xsdns = 'http://www.w3.org/2001/XMLSchema#')
	
	#*--------------------
			CAEXFile
	----------------------*#
	
	## -- CAEXFile --
	#set( $URIhelp = $UriHelper.createInstanceUri($libcategory,"CAEXFile",null,null,"$caexfile.FileName") )
	<owl:NamedIndividual rdf:about="${URIhelp}">
		<rdf:type rdf:resource="${amlns}CAEXFile"/>
		<amlont:fileName rdf:datatype="${xsdns}string">$caexfile.FileName</amlont:fileName>
	</owl:NamedIndividual>

	#*--------------------
		SystemUnitClassLib (Hierarchy)
	----------------------*#
	
	## -- SystemUnitClassLib --
	#foreach ($suclib in $caexfile.getSystemUnitClassLib())
	#set( $URIhelp = $UriHelper.createInstanceUri($libcategory,"SystemUnitClassLib","$suclib.Name",null,"$suclib.Name") )
	<owl:NamedIndividual rdf:about="${URIhelp}">
		<rdf:type rdf:resource="${amlns}SystemUnitClassLib"/>
		<amlont:name rdf:datatype="${xsdns}string">$suclib.Name</amlont:name>
		## -- TODO: TEST :systemUnitClass property ---
		## This is a reference to SystemUnitClass children
		#foreach ($succhild in $suclib.SystemUnitClass)
		#set( $URIchild = $UriHelper.createInstanceUri($libcategory,"SystemUnitClass","$suclib.Name","$succhild.Name", "$succhild.Name") )
		<amlont:systemUnitClass rdf:resource="${URIchild}"/>
		#end	
	</owl:NamedIndividual>		
	#end
	
	#*--------------------
		SystemUnitClass in SystemUnitClassLib
	----------------------*#
	
	## -- SystemUnitClass --
	#foreach ($suclib in $caexfile.getSystemUnitClassLib())
		#foreach ($suc in $suclib.SystemUnitClass)
	#walkSystemUnitClasses($suc, $suclib)
		#end		
	#end

	## --Recursive walk through SystemUnitClass (JAXB Type SystemUnitClassType)--
	## NOTE: $URIHelper.createInstanceUri() is called with OWL Type parameter (NOT JAXB)
	#macro(walkSystemUnitClasses $node $hierarchy)
	#set( $sucref = $node.RefBaseSystemUnitPath )
	#set( $SUCrep = $StringUtils.replace($sucref,"/","_") )
	#set( $URIhelp = $UriHelper.createInstanceUri($libcategory,"SystemUnitClass","$hierarchy.Name","$node.Name", "$node.Name") )
	<owl:NamedIndividual rdf:about="${URIhelp}">
		<rdf:type rdf:resource="${amlns}SystemUnitClass"/>
		<amlont:name rdf:datatype="${xsdns}string">$node.Name</amlont:name>
		#if($node.ID)
			<amlont:iD rdf:datatype="${xsdns}string">$node.ID</amlont:iD>
		#end
		#* NO refBaseSystemUnitPath
			#set( $URIhelp = $UriHelper.createInstanceUri($libcategory,"SystemUnitClass","$hierarchy.Name","$node.Name", "${SUCrep}") )
			<amlont:refBaseSystemUnitPath rdf:resource="${URIhelp}"/>
		*#
		## -- attribute property --
		#foreach ($att in $node.getAttribute())
			#set( $URIhelp = $UriHelper.createInstanceUri($libcategory,"Attribute","$hierarchy.Name","$node.Name", "$att.Name") )
			<amlont:attribute rdf:resource="${URIhelp}"/>
		#end
		## -- internalElement property ---
		## This is a reference to InternalElement children of this SystemUnitClass
		## NOTE: Now the URI contains as a substring the name of this SystemUnitClassLib (possible ambiguity problem)
		#foreach ($iechild in $node.InternalElement)
		#set( $URIchild = $UriHelper.createInstanceUri($libcategory,"InternalElement","$hierarchy.Name","$iechild.Name", "$iechild.Name") )
		<amlont:internalElement rdf:resource="${URIchild}"/>
		#end			
		## -- TODO: TEST :systemUnitClass property ---
		## This is a reference to SystemUnitClass children
		#foreach ($succhild in $node.SystemUnitClass)
		#set( $URIchild = $UriHelper.createInstanceUri($libcategory,"SystemUnitClass","$hierarchy.Name","$succhild.Name", "$succhild.Name") )
		<amlont:systemUnitClass rdf:resource="${URIchild}"/>
		#end	
	</owl:NamedIndividual>	
	#if ($node.SystemUnitClass.size() > 0)
		#foreach ($child in $node.SystemUnitClass)
			#walkSystemUnitClasses($child $hierarchy)
		#end
	#end
	#end
	## -- macro end
	
	#*--------------------
		InternalElement in SystemUnitClass in SystemUnitClassLib
	----------------------*#
	
	## -- InternalElement --
	#foreach ($suclib in $caexfile.getSystemUnitClassLib())
		#foreach ($suc in $suclib.SystemUnitClassType)
			#foreach ($ie in $suc.InternalElement)
				#walkIElements($ie, $suclib)
			#end
		#end		
	#end

	## --Recursive walk through InternalElements--
	## NOTE: $URIHelper.createInstanceUri() is called with OWL Type parameter (NOT JAXB)
	#macro(walkIElements $node $hierarchy)
	#set( $sucref = $node.RefBaseSystemUnitPath )
	#set( $SUCrep = $StringUtils.replace($sucref,"/","_") )
	#set( $URIhelp = $UriHelper.createInstanceUri($libcategory,"InternalElement","$hierarchy.Name","$node.Name", "$node.Name") )
	<owl:NamedIndividual rdf:about="${URIhelp}">
		<rdf:type rdf:resource="${amlns}InternalElement"/>
		<amlont:name rdf:datatype="${xsdns}string">$node.Name</amlont:name>
		<amlont:iD rdf:datatype="${xsdns}string">$node.ID</amlont:iD>
		#set( $URIhelp = $UriHelper.createInstanceUri($libcategory,"SystemUnitClass","$hierarchy.Name","$node.Name", "${SUCrep}") )
		<amlont:refBaseSystemUnitPath rdf:resource="${URIhelp}"/>
		## -- attribute property --
		#foreach ($att in $node.getAttribute())
			#set( $URIhelp = $UriHelper.createInstanceUri($libcategory,"Attribute","$hierarchy.Name","$node.Name", "$att.Name") )
			<amlont:attribute rdf:resource="${URIhelp}"/>
		#end
	</owl:NamedIndividual>	
	#if ($node.InternalElement.size() > 0)
		#foreach ($child in $node.InternalElement)
			#walkIElements($child $hierarchy)
		#end
	#end
	#end
	## -- macro end
	
	#*--------------------
		  Attribute in InternalElement in SystemUnitClassLib
	----------------------*#
	
	
	## -- Attribute --
	#foreach ($suclib in $caexfile.getSystemUnitClassLib())
		#foreach ($ie in $suclib.InternalElement)
			#walkIElementsForAttributes($ie $suclib)
		#end		
	#end
	
	## --Recursive attribute creation from all InternalElements--
	## NOTE: For CAEX 3.0 REMOVE: $AnyValueHelper.getAnyTypeContent() is called with JAXB type parameter (NOT OWL)
	## NOTE: $URIHelper.createInstanceUri() is called with OWL Type parameter (NOT JAXB)
	#macro(walkIElementsForAttributes $node $hierarchy)
		#foreach ($att in $node.getAttribute())
				#set( $ATTValue = $att.Value )
				#set( $ATTDefValue = $att.DefaultValue )
				#set( $URIhelp = $UriHelper.createInstanceUri($libcategory,"Attribute","$hierarchy.Name","$node.Name", "$att.Name") )
				<owl:NamedIndividual rdf:about="${URIhelp}">
				<rdf:type rdf:resource="${amlns}Attribute"/>
					<amlont:name rdf:datatype="${xsdns}string">$att.Name</amlont:name>
					<amlont:attributeDataType rdf:datatype="${xsdns}string">$att.AttributeDataType</amlont:attributeDataType>
					#if ($ATTDefValue)
						<amlont:defaultValue rdf:datatype="${xsdns}string">$ATTDefValue</amlont:defaultValue>
					#end
					<amlont:value rdf:datatype="${xsdns}string">$ATTValue</amlont:value>
		#* 2018-07-03 constraint property range is AttributeValueRequirement *#
			#set( $cnstrs = false )
			#set( $cnstrs = $att.getConstraint() )
			#foreach ($con in $cnstrs)
			#set( $AttName = $att.Name )
			#set( $ConName = $con.Name )
			#set( $uscore = "_C_" )
			#set( $URIhelp2 = $UriHelper.createInstanceUri($libcategory,"AttributeValueRequirement","$hierarchy.Name","$node.Name", "$AttName$uscore$ConName") )
			<amlont:constraint rdf:resource="${URIhelp2}"/>
			#end
			#set( $cnstrs = false )
			
			</owl:NamedIndividual>
		
		#* 2018-07-03 Constraint instance is type AttributeValueRequirement *#
			#set( $coons = false )
			#set( $coons = $att.getConstraint() )
			#foreach ($coon in $coons)
			#set( $AttriName = $att.Name )
			#set( $CoonName = $coon.Name )
			#set( $uscore = "_C_" )
			#set( $URIhelp3 = $UriHelper.createInstanceUri($libcategory,"AttributeValueRequirement","$hierarchy.Name","$node.Name", "$AttriName$uscore$CoonName") )
			<owl:NamedIndividual rdf:about="${URIhelp3}">
			<rdf:type rdf:resource="${amlns}AttributeValueRequirement"/>
			## --- Generate Constraint links to scaledTypes
			#genLinksToScaledTypes($hierarchy.Name $node.Name $AttriName $coon)
			</owl:NamedIndividual>			
			## --- Generate individuals of ScaledTypes
			#generateScaledTypes($hierarchy.Name $node.Name $AttriName $coon)			
			#end
			#set( $coons = false )	
		#end
	#if ($node.InternalElement.size() > 0)
		#foreach ($child in $node.InternalElement)
			#walkIElementsForAttributes($child $hierarchy)
		#end
	#end	
	#end
	## -- macro end

		#* --------------------
	 Generate Constraint links to scaledTypes sub-macro 
	-----------------------*#
	
	#macro(genLinksToScaledTypes $ihname $nodename $attname $constraint)
	## NOTE: Constraint can be OrdinalScaledType, NominalScaledType or UnknownType
	## NOTE: Velocity variables will keep the old value. "At the end of the loop set the variable to false"
	## NOTE: Or before you set its value
		#set( $coonname = $constraint.Name )
		#set( $Scaled = false )
		#set( $Scaled = $constraint.getOrdinalScaledType() )
		#if ($Scaled)
			## OrdinalScaledType
			#set( $uscore = "_C_" )
			#set( $ost = "_OST" )
			#set( $URIhelp4 = $UriHelper.createInstanceUri($libcategory,"OrdinalScaled","$ihname","$nodename", "$attname$uscore$coonname$ost") )	
			<amlont:ordinalScaledType rdf:resource="${URIhelp4}"/>
		#end
		
		#set( $Scaled = false )
		#set( $Scaled = $constraint.getNominalScaledType() )
		#if ($Scaled)
			## NominalScaledType
			#set( $uscore = "_C_" )
			#set( $nst = "_NST" )
			#set( $URIhelp5 = $UriHelper.createInstanceUri($libcategory,"NominalScaled","$ihname","$nodename", "$attname$uscore$coonname$nst") )	
			<amlont:nominalScaledType rdf:resource="${URIhelp5}"/>
		#end
		
		#set( $Scaled = false )
		#set( $Scaled = $constraint.getUnknownType() )
		#if ($Scaled)
			## UnknownType
			#set( $uscore = "_C_" )
			#set( $unt = "_UNT" )
			#set( $URIhelp6 = $UriHelper.createInstanceUri($libcategory,"UnknownType","$ihname","$nodename", "$attname$uscore$coonname$unt") )	
			<amlont:nominalScaledType rdf:resource="${URIhelp6}"/>
		#end
		
		#set( $Scaled = false )
	#end
	## -- macro end
	
	
	#* --------------------
	 Generate individuals of ScaledTypes 
	-----------------------*#
	
	#macro(generateScaledTypes $ihname $nodename $attname $constraint)
	## NOTE: Constraint can be OrdinalScaledType, NominalScaledType or UnknownType
	## NOTE: Velocity variables will keep the old value. "At the end of the loop set the variable to false"
	## NOTE: Or before you set its value
		#set( $coonname = $constraint.Name )
		#set( $Scaled = false )
		#set( $Scaled = $constraint.getOrdinalScaledType() )
		#if ($Scaled)
			## OrdinalScaledType
			#set( $uscore = "_C_" )
			#set( $ost = "_OST" )
			#set( $URIhelp = $UriHelper.createInstanceUri($libcategory,"OrdinalScaled","$ihname","$nodename", "$attname$uscore$coonname$ost") )			
			<owl:NamedIndividual rdf:about="${URIhelp}">
			<rdf:type rdf:resource="${amlns}OrdinalScaled"/>			
			#set( $reqmaxval = false )
			#set( $reqmaxval = $Scaled.getRequiredMaxValue() )
			#if ($reqmaxval)
			<amlont:requiredMaxValue rdf:datatype="${xsdns}string">$reqmaxval</amlont:requiredMaxValue>
			#end
			#set( $reqval = false )
			#set( $reqval = $Scaled.getRequiredValue() )
			#if ($reqval)
			<amlont:requiredValue rdf:datatype="${xsdns}string">$reqval</amlont:requiredValue>
			#end
			#set( $reqminval = false )
			#set( $reqminval = $Scaled.getRequiredMinValue() )
			#if ($reqminval)
			<amlont:requiredMinValue rdf:datatype="${xsdns}string">$reqminval</amlont:requiredMinValue>
			#end
			</owl:NamedIndividual>
		#end
		
		#set( $Scaled = false )
		#set( $Scaled = $constraint.getNominalScaledType() )
		#if ($Scaled)
			## NominalScaledType
			#set( $uscore = "_C_" )
			#set( $nst = "_NST" )
			#set( $URIhelp = $UriHelper.createInstanceUri($libcategory,"NominalScaled","$ihname","$nodename", "$attname$uscore$coonname$nst") )	
			<owl:NamedIndividual rdf:about="${URIhelp}">
			<rdf:type rdf:resource="${amlns}NominalScaled"/>	
			#set( $reqvals = false )
			#set( $reqvals = $Scaled.getRequiredValue() )
			#foreach ($reqv in $reqvals)
			<amlont:requiredValue rdf:datatype="${xsdns}string">$reqv</amlont:requiredValue>
			#end
			</owl:NamedIndividual>
		#end
		
		#set( $Scaled = false )
		#set( $Scaled = $constraint.getUnknownType() )
		#if ($Scaled)
			## UnknownType
			#set( $uscore = "_C_" )
			#set( $unt = "_UNT" )
			#set( $URIhelp = $UriHelper.createInstanceUri($libcategory,"UnknownType","$ihname","$nodename", "$attname$uscore$coonname$unt") )	
			<owl:NamedIndividual rdf:about="${URIhelp}">
			<rdf:type rdf:resource="${amlns}UnknownType"/>	
			#set( $reqs = false )
			#set( $reqs = $Scaled.getRequirements() )			
			<amlont:requirements rdf:datatype="${xsdns}string">$reqs</amlont:requirements>
			#set( $reqs = false )
			</owl:NamedIndividual>
		#end
		
		#set( $Scaled = false )
	#end
	## -- macro end
	
	
	
	
	
	
	
	#*--------------------
		ExternalInterface in SystemUnitClass
	----------------------*#
		
	## -- ExternalInterface -- (rdfs:subClassOf InterfaceClass)
	## NOTE: $URIHelper.createInstanceUri() is called with OWL Type parameter (NOT JAXB)
	## In JAXB:InternalElement extends SystemUnitClassType
	## which has property externalInterface.
	## In JAXB: ExternalInterface is type InterfaceClassType
	#foreach ($suclib in $caexfile.getSystemUnitClassLib())
		#foreach ($suc in $suclib.SystemUnitClass)
			#walkIEForEInterface($suc $suclib)
		#end		
	#end
	
	#*--------------------
		ExternalInterface in InternalElement
	----------------------*#
		
	## -- ExternalInterface -- (rdfs:subClassOf InterfaceClass)
	## NOTE: $URIHelper.createInstanceUri() is called with OWL Type parameter (NOT JAXB)
	## In JAXB:InternalElement extends SystemUnitClassType
	## which has property externalInterface.
	## In JAXB: ExternalInterface is type InterfaceClassType
	#foreach ($suclib in $caexfile.getSystemUnitClassLib())
		#foreach ($ie in $suclib.InternalElement)
			#walkIEForEInterface($ie $suclib)
		#end		
	#end
	
	## --Recursive ExternalInterface creation of all SystemUnitClasses and of all InternalElements of SystemUnitClasses
	#macro(walkIEForEInterface $node $hierarchy)
		#foreach ($extint in $node.getExternalInterface())
				
				#set( $URIhelp = $UriHelper.createInstanceUri($libcategory,"ExternalInterface","$hierarchy.Name","$node.Name", "$extint.Name") )
				#set( $RBCPath = $extint.getRefBaseClassPath() )
				<owl:NamedIndividual rdf:about="${URIhelp}">
				<rdf:type rdf:resource="${amlns}ExternalInterface"/>
					<amlont:name rdf:datatype="${xsdns}string">$extint.Name</amlont:name>
					<amlont:iD rdf:datatype="${xsdns}string">$extint.ID</amlont:iD>
					<amlont:refBaseClassPath rdf:datatype="${xsdns}string">$RBCPath</amlont:refBaseClassPath>				
				</owl:NamedIndividual>
		#end
	#if ($node.InternalElement.size() > 0)
		#foreach ($child in $node.InternalElement)
			#walkIEForEInterface($child $hierarchy)
		#end
	#end	
	#end
	## -- macro end
	
	#*--------------------
		InternalLink in InternalElement in SystemUnitClassLib (if any?)
	----------------------*#
	
	## -- InternalLink -- (rdfs:subClassOf CAEXObject)
	#foreach ($suclib in $caexfile.getSystemUnitClassLib())
		#foreach ($ie in $suclib.InternalElement)
			#walkIEForInternalLink($ie $suclib)
		#end		
	#end
	
	## --Recursive InternalLink creation from all InternalElements--
	#macro(walkIEForInternalLink $node $hierarchy)
		#foreach ($intlink in $node.getInternalLink())
				#set( $ILINKName = $intlink.Name )
				#set( $ILNamerep = $StringUtils.replace($ILINKName," ","_") )
				#set( $LinkURIhelp = $UriHelper.createInstanceUri($libcategory,"InternalLink","$hierarchy.Name","$node.Name", "$ILNamerep") )
				#set( $RPSideA = $intlink.getRefPartnerSideA() )
				#set( $RPSideB = $intlink.getRefPartnerSideB() )
				## Calling a sub macro
				#set( $SideURI = "" )
				#macroReferedExtIntURI($RPSideA $hierarchy $SideURI)
				#set( $SideAURI = $SideURI )
				#set( $SideURI = "" )
				#macroReferedExtIntURI($RPSideB $hierarchy $SideURI)
				#set( $SideBURI = $SideURI )
				
				<owl:NamedIndividual rdf:about="${LinkURIhelp}">
				<rdf:type rdf:resource="${amlns}InternalLink"/>
					<amlont:name rdf:datatype="${xsdns}string">$intlink.Name</amlont:name>
					## refPartnerSideA and B are owl:ObjectProperties
					<amlont:refPartnerSideA rdf:resource="${SideAURI}"/> 
					<amlont:refPartnerSideB rdf:resource="${SideBURI}"/> 
					##TEST<amlont:TEMPSideA rdf:datatype="${xsdns}string">$SideAURI</amlont:TEMPSideA>
					##TEST<amlont:TEMPSideB rdf:datatype="${xsdns}string">$RPSideB</amlont:TEMPSideB>
				</owl:NamedIndividual>
		#end
	#if ($node.InternalElement.size() > 0)
		#foreach ($child in $node.InternalElement)
			#walkIEForInternalLink($child $hierarchy)
		#end
	#end	
	#end
	## -- macro end
	
	## -- ExternalInterface URIs Referenced in InternalLink --
	## reference RefPartnerSide consists of (InternalElement's_ID:EInterface's_Name)
	## See: https://stackoverflow.com/questions/6914312/calling-macro-function-in-velocity-template
	## "To get rid of spaces and blank lines use multi-line comments"
	## "preferably an externally defined result variable can be passed 'by reference'"
	#macro(macroReferedExtIntURI $RPSide $hierarchy $SideURI)
		#if($SideURI)
		## Parsing link reference refPartnerSide
		#set( $Cond = $StringUtils.contains($RPSide,":") )
			#if($Cond)				
				## First part of link reference is InternalElement's_ID
				#set( $IElemID = $StringUtils.split($RPSide,":")[0] )
				## Second part of link reference is EInterface's_Name
				#set( $EIntName = $StringUtils.split($RPSide,":")[1] )
				#set( $IEFound = "" )
				#set( $IHReturn = "" )
				##macroFindExtInt($hierarchy $IElemID $EIntName $IEFound $IHReturn)
				#macroFindExtInt($IElemID $IEFound $IHReturn)
					#if( $IEFound != "" )
					#set( $ExtIntURIhelp = $UriHelper.createInstanceUri($libcategory,"ExternalInterface","$IHReturn","$IEFound", "$EIntName") )
					#set( $SideURI = $ExtIntURIhelp )
					#end
					#if( $SideURI == "" )					
						#set( $SideURI = "EXTERNAL_INTERFACE_NOT_FOUND" )
					#end
			#end
		#end
	#end
	## -- macro end
	
	##macro(macroFindExtInt $hierarchy $IElemID $EIntName $IEFound $IHReturn)
	#macro(macroFindExtInt $IElemID $IEFound $IHReturn)
		## Param: $hierarchy AND $EIntName NOT in USE
		#if($IEFound)
			## TEMP set( $IEFound = "TESTING_TESTING" )
			## -- SEARCHING REFERENCED InternalElement containing the ExternalInterface
			#set( $IEReturn = "" )
			#set( $IHReturn = "" )
			## SEARCHING FROM ALL InstanceHierarchy
			#foreach ($ih in $caexfile.getInstanceHierarchy())
				#if( $IHReturn == "" )
				#foreach ($ie in $ih.InternalElement)
				#if( $IEReturn == "" )
					#recursiveSearchIElementsWithID($ie $ih $IElemID $IEReturn $IHReturn)
				#end
				#if( $IEReturn != "" )
					#set( $IEFound = $IEReturn )				
				#end
				#end
				#end				
			#end
			## SEARCHING FROM ALL SystemUnitClassLib
			#foreach ($suclib in $caexfile.getSystemUnitClassLib())
				#if( $IHReturn == "" )
				#foreach ($ie in $suclib.InternalElement)
				#if( $IEReturn == "" )
					#recursiveSearchIElementsWithID($ie $suclib $IElemID $IEReturn $IHReturn)
				#end
				#if( $IEReturn != "" )
					#set( $IEFound = $IEReturn )				
				#end
				#end
				#end				
			#end
		#end
	#end
	## -- macro end
	
	#macro(recursiveSearchIElementsWithID $node $ih $IElemID $IEReturn $IHReturn)
		## 
		#if($IEReturn)
			##set( $IEReturn = "RECURSIVE_TESTING" )
			#set( $ThisID = $node.getID())
			#set( $ThisName = $node.getName())
			#set( $ThisHierarcyName = $ih.getName())
			##set( $IEReturn = "$IEReturn$ThisID" )
						
			#if($IElemID == $ThisID)
				##set( $IEReturn = "FOUND_FOUND_RECURSIVE_TESTING" )
				#set( $IEReturn = $ThisName )
				#set( $IHReturn = $ThisHierarcyName )
			#end
		#end
		#if ($node.InternalElement.size() > 0)
		#foreach ($child in $node.InternalElement)
			#recursiveSearchIElementsWithID($child $ih $IElemID $IEReturn $IHReturn)
		#end
		#end	
	#end
	## -- macro end
	
</rdf:RDF>