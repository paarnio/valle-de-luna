<rdf:RDF xmlns="http://siima.net/ontologies/2017/caex/" 
	xml:base="http://siima.net/ontologies/2017/caex/"
	xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#"
	xmlns:owl="http://www.w3.org/2002/07/owl#"
	xmlns:rdfs="http://www.w3.org/2000/01/rdf-schema#"
	xmlns:xsd="http://www.w3.org/2001/XMLSchema#"
	xmlns:siima="http://siima.net/ontologies/2017/caex/"
	xmlns:amlont="http://data.ifs.tuwien.ac.at/aml/ontology#">
	#* 2018-07-02 vmFile_interfaceclasslib_caex3_ontogen.vm
	A vmFile for CAEX 3.0 ontology transformation
	CHANGE: In CAEX 3.0 Value and DefaultValue of Attributes is type String
	Thus, $AnyValueHelper is not needed. 
	NOTE: New parameter libcategory added to $URIHelper.createInstanceUri()
	$URIHelper.createInstanceUri(libcategory, instanceOwlType, hierarchy, iElement, instanceName)
	NOTE: 2018-07-04 Attribute Constraints transform
	NOTE: IMPORTANT: Velocity variables will keep the old value. 
	"At the end of the loop set the variable to false"
	Or before you set its value like this:
		#set( $Scaled = false )
		#set( $Scaled = $constraint.getOrdinalScaledType() )
		#if ($Scaled)
		
	(For Older CAEX 2.5 version 2017-09-25 vmFile_interfaceclasslib_ontogen.vm
	 NOTE: 2017-09-25 interfaceClass property added for InterfaceClass and InterfaceClassLib
	 (BASED ON: 2017-06-12 vmFile_systemunitclasslib_ontogen.vm)
	 (BASED ON: 2017-06-11 vmFile_ihierarchy_ontogen.vm) 
	 NOTE: VelocityContext is expected to be initiated with  JAXB object CAEXFile caex
	 with key "caexfile" in the constructor of VeloContainer (vcontext.put("caexfile", caex))
	 NOTE: $AnyValueHelper.getAnyTypeContent() is called with JAXB type parameter (NOT OWL)
	 NOTE: $URIHelper.createInstanceUri() is called with OWL Type parameter (NOT JAXB)
	 2017-06-09 CALLING MY OWN CLASS(AnyTypeValueHelper) METHOD: putVelocityContext("AnyValueHelper", anyContentHelper); 
	 Helper method for finding out Attributes Value's content: now [Value: null]
	 2017-05-28 FOR STRING FUNCTIONS PUT StringUtils class TO CONTEXT: $StringUtils
	 SEE: "StringUtils", org.apache.commons.lang3.StringUtils.class
	 SEE: https://stackoverflow.com/questions/6998412/velocity-string-function
	 2017-05-29 CALLING MY OWN CLASS(UriHelper) METHOD:putVelocityContext("UriHelper", helper) 
	 SEE: https://stackoverflow.com/questions/20786403/calling-a-java-method-in-velocity-template
	 *#
	
	## 2018-07-02 NEW: value for libcategory parameter in $URIHelper.createInstanceUri()
	#set( $libcategory = 'InterfaceClassLib')
	
	#set( $amlns = 'http://data.ifs.tuwien.ac.at/aml/ontology#')
	#set( $xsdns = 'http://www.w3.org/2001/XMLSchema#')
	
	#*--------------------
			CAEXFile
	----------------------*#
	
	## -- CAEXFile --
	#set( $URIhelp = $UriHelper.createInstanceUri($libcategory,"CAEXFile",null,null,"$caexfile.FileName") )
	<owl:NamedIndividual rdf:about="${URIhelp}">
		<rdf:type rdf:resource="${amlns}CAEXFile"/>
		<amlont:fileName rdf:datatype="${xsdns}string">$caexfile.FileName</amlont:fileName>
	</owl:NamedIndividual>

	#*--------------------
		InterfaceClassLib (Hierarchy)
	----------------------*#
	
	## -- InterfaceClassLib --
	#foreach ($interfaceclib in $caexfile.getInterfaceClassLib())
	#set( $URIhelp = $UriHelper.createInstanceUri($libcategory,"InterfaceClassLib","$interfaceclib.Name",null,"$interfaceclib.Name") )
	<owl:NamedIndividual rdf:about="${URIhelp}">
		<rdf:type rdf:resource="${amlns}InterfaceClassLib"/>
		## -- interfaceClass property ---
		## This is a reference to InterfaceClass children
		#foreach ($ifacechild in $interfaceclib.InterfaceClass)
		#set( $URIchild = $UriHelper.createInstanceUri($libcategory,"InterfaceClass","$interfaceclib.Name","$ifacechild.Name", "$ifacechild.Name") )
		<amlont:interfaceClass rdf:resource="${URIchild}"/>
		#end				
	</owl:NamedIndividual>		
	#end
	
	#*--------------------
		InterfaceClass in InterfaceClassLib
	----------------------*#
	
	## -- InterfaceClass --
	#foreach ($interfaceclib in $caexfile.getInterfaceClassLib())
		#foreach ($ifacec in $interfaceclib.InterfaceClass)
	#walkIfaceClasses($ifacec, $interfaceclib)
		#end		
	#end

	## --Recursive walk through InterfaceClass (JAXB Type InterfaceFamilyType)--
	## NOTE: $AnyValueHelper.getAnyTypeContent() is called with JAXB type parameter (NOT OWL)
	## NOTE: $URIHelper.createInstanceUri() is called with OWL Type parameter (NOT JAXB)
	#macro(walkIfaceClasses $node $hierarchy)
	##set( $rbasecref = $node.RefBaseClassPath )
	##set( $BASECrep = $StringUtils.replace($rbasecref,"/","_") )
	#set( $URIhelp = $UriHelper.createInstanceUri($libcategory,"InterfaceClass","$hierarchy.Name","$node.Name", "$node.Name") )
	<owl:NamedIndividual rdf:about="${URIhelp}">
		<rdf:type rdf:resource="${amlns}InterfaceClass"/>
		<amlont:name rdf:datatype="${xsdns}string">$node.Name</amlont:name>
		#if($node.ID)
			<amlont:iD rdf:datatype="${xsdns}string">$node.ID</amlont:iD>
		#end		
		## -- attribute property --
		#foreach ($att in $node.getAttribute())
			#set( $URIhelp = $UriHelper.createInstanceUri($libcategory,"Attribute","$hierarchy.Name","$node.Name", "$att.Name") )
			<amlont:attribute rdf:resource="${URIhelp}"/>
		#end
		## -- interfaceClass property ---
		## This is a reference to InterfaceClass children
		#foreach ($ifacechild in $node.InterfaceClass)
		#set( $URIchild = $UriHelper.createInstanceUri($libcategory,"InterfaceClass","$hierarchy.Name","$ifacechild.Name", "$ifacechild.Name") )
		<amlont:interfaceClass rdf:resource="${URIchild}"/>
		#end				
	</owl:NamedIndividual>	
	#if ($node.InterfaceClass.size() > 0)
		#foreach ($child in $node.InterfaceClass)
			#walkIfaceClasses($child $hierarchy)
		#end
	#end
	#end
	## -- macro end
	
	#*--------------------
		  Attribute in in InterfaceClass in InterfaceClassLib
	----------------------*#	
	## -- Attribute --
	#foreach ($interfaceclib in $caexfile.getInterfaceClassLib())
		#foreach ($ifacec in $interfaceclib.InterfaceClass)
			#walkIElementsForAttributes($ifacec $interfaceclib)
		#end		
	#end
	
	## --Recursive attribute creation from all InterfaceClass--
	## NOTE: For CAEX 3.0 REMOVE: $AnyValueHelper.getAnyTypeContent() is called with JAXB type parameter (NOT OWL)
	## NOTE: $URIHelper.createInstanceUri() is called with OWL Type parameter (NOT JAXB)
	#macro(walkIElementsForAttributes $node $hierarchy)
		#foreach ($att in $node.getAttribute())
				#set( $ATTValue = $att.Value )
				#set( $ATTDefValue = $att.DefaultValue )
				#set( $URIhelp = $UriHelper.createInstanceUri($libcategory,"Attribute","$hierarchy.Name","$node.Name", "$att.Name") )
				<owl:NamedIndividual rdf:about="${URIhelp}">
				<rdf:type rdf:resource="${amlns}Attribute"/>
					<amlont:name rdf:datatype="${xsdns}string">$att.Name</amlont:name>
					<amlont:attributeDataType rdf:datatype="${xsdns}string">$att.AttributeDataType</amlont:attributeDataType>
					#if ($ATTDefValue)
						<amlont:defaultValue rdf:datatype="${xsdns}string">$ATTDefValue</amlont:defaultValue>
					#end
					<amlont:value rdf:datatype="${xsdns}string">$ATTValue</amlont:value>
					
		#* 2018-07-03 constraint property range is AttributeValueRequirement *#
			#set( $cnstrs = false )
			#set( $cnstrs = $att.getConstraint() )
			#foreach ($con in $cnstrs)
			#set( $AttName = $att.Name )
			#set( $ConName = $con.Name )
			#set( $uscore = "_C_" )
			#set( $URIhelp2 = $UriHelper.createInstanceUri($libcategory,"AttributeValueRequirement","$hierarchy.Name","$node.Name", "$AttName$uscore$ConName") )
			<amlont:constraint rdf:resource="${URIhelp2}"/>
			#end
			#set( $cnstrs = false )
			
			</owl:NamedIndividual>
		
		#* 2018-07-03 Constraint instance is type AttributeValueRequirement *#
			#set( $coons = false )
			#set( $coons = $att.getConstraint() )
			#foreach ($coon in $coons)
			#set( $AttriName = $att.Name )
			#set( $CoonName = $coon.Name )
			#set( $uscore = "_C_" )
			#set( $URIhelp3 = $UriHelper.createInstanceUri($libcategory,"AttributeValueRequirement","$hierarchy.Name","$node.Name", "$AttriName$uscore$CoonName") )
			<owl:NamedIndividual rdf:about="${URIhelp3}">
			<rdf:type rdf:resource="${amlns}AttributeValueRequirement"/>
			## --- Generate Constraint links to scaledTypes
			#genLinksToScaledTypes($hierarchy.Name $node.Name $AttriName $coon)
			</owl:NamedIndividual>			
			## --- Generate individuals of ScaledTypes
			#generateScaledTypes($hierarchy.Name $node.Name $AttriName $coon)			
			#end
			#set( $coons = false )	
					
			
		#end
	#if ($node.InterfaceClass.size() > 0)
		#foreach ($child in $node.InterfaceClass)
			#walkIElementsForAttributes($child $hierarchy)
		#end
	#end	
	#end
	## -- macro end

	
	#* --------------------
	 Generate Constraint links to scaledTypes sub-macro 
	-----------------------*#
	
	#macro(genLinksToScaledTypes $ihname $nodename $attname $constraint)
	## NOTE: Constraint can be OrdinalScaledType, NominalScaledType or UnknownType
	## NOTE: Velocity variables will keep the old value. "At the end of the loop set the variable to false"
	## NOTE: Or before you set its value
		#set( $coonname = $constraint.Name )
		#set( $Scaled = false )
		#set( $Scaled = $constraint.getOrdinalScaledType() )
		#if ($Scaled)
			## OrdinalScaledType
			#set( $uscore = "_C_" )
			#set( $ost = "_OST" )
			#set( $URIhelp4 = $UriHelper.createInstanceUri($libcategory,"OrdinalScaled","$ihname","$nodename", "$attname$uscore$coonname$ost") )	
			<amlont:ordinalScaledType rdf:resource="${URIhelp4}"/>
		#end
		
		#set( $Scaled = false )
		#set( $Scaled = $constraint.getNominalScaledType() )
		#if ($Scaled)
			## NominalScaledType
			#set( $uscore = "_C_" )
			#set( $nst = "_NST" )
			#set( $URIhelp5 = $UriHelper.createInstanceUri($libcategory,"NominalScaled","$ihname","$nodename", "$attname$uscore$coonname$nst") )	
			<amlont:nominalScaledType rdf:resource="${URIhelp5}"/>
		#end
		
		#set( $Scaled = false )
		#set( $Scaled = $constraint.getUnknownType() )
		#if ($Scaled)
			## UnknownType
			#set( $uscore = "_C_" )
			#set( $unt = "_UNT" )
			#set( $URIhelp6 = $UriHelper.createInstanceUri($libcategory,"UnknownType","$ihname","$nodename", "$attname$uscore$coonname$unt") )	
			<amlont:nominalScaledType rdf:resource="${URIhelp6}"/>
		#end
		
		#set( $Scaled = false )
	#end
	## -- macro end
	
	
	#* --------------------
	 Generate individuals of ScaledTypes 
	-----------------------*#
	
	#macro(generateScaledTypes $ihname $nodename $attname $constraint)
	## NOTE: Constraint can be OrdinalScaledType, NominalScaledType or UnknownType
	## NOTE: Velocity variables will keep the old value. "At the end of the loop set the variable to false"
	## NOTE: Or before you set its value
		#set( $coonname = $constraint.Name )
		#set( $Scaled = false )
		#set( $Scaled = $constraint.getOrdinalScaledType() )
		#if ($Scaled)
			## OrdinalScaledType
			#set( $uscore = "_C_" )
			#set( $ost = "_OST" )
			#set( $URIhelp = $UriHelper.createInstanceUri($libcategory,"OrdinalScaled","$ihname","$nodename", "$attname$uscore$coonname$ost") )			
			<owl:NamedIndividual rdf:about="${URIhelp}">
			<rdf:type rdf:resource="${amlns}OrdinalScaled"/>			
			#set( $reqmaxval = false )
			#set( $reqmaxval = $Scaled.getRequiredMaxValue() )
			#if ($reqmaxval)
			<amlont:requiredMaxValue rdf:datatype="${xsdns}string">$reqmaxval</amlont:requiredMaxValue>
			#end
			#set( $reqval = false )
			#set( $reqval = $Scaled.getRequiredValue() )
			#if ($reqval)
			<amlont:requiredValue rdf:datatype="${xsdns}string">$reqval</amlont:requiredValue>
			#end
			#set( $reqminval = false )
			#set( $reqminval = $Scaled.getRequiredMinValue() )
			#if ($reqminval)
			<amlont:requiredMinValue rdf:datatype="${xsdns}string">$reqminval</amlont:requiredMinValue>
			#end
			</owl:NamedIndividual>
		#end
		
		#set( $Scaled = false )
		#set( $Scaled = $constraint.getNominalScaledType() )
		#if ($Scaled)
			## NominalScaledType
			#set( $uscore = "_C_" )
			#set( $nst = "_NST" )
			#set( $URIhelp = $UriHelper.createInstanceUri($libcategory,"NominalScaled","$ihname","$nodename", "$attname$uscore$coonname$nst") )	
			<owl:NamedIndividual rdf:about="${URIhelp}">
			<rdf:type rdf:resource="${amlns}NominalScaled"/>	
			#set( $reqvals = false )
			#set( $reqvals = $Scaled.getRequiredValue() )
			#foreach ($reqv in $reqvals)
			<amlont:requiredValue rdf:datatype="${xsdns}string">$reqv</amlont:requiredValue>
			#end
			</owl:NamedIndividual>
		#end
		
		#set( $Scaled = false )
		#set( $Scaled = $constraint.getUnknownType() )
		#if ($Scaled)
			## UnknownType
			#set( $uscore = "_C_" )
			#set( $unt = "_UNT" )
			#set( $URIhelp = $UriHelper.createInstanceUri($libcategory,"UnknownType","$ihname","$nodename", "$attname$uscore$coonname$unt") )	
			<owl:NamedIndividual rdf:about="${URIhelp}">
			<rdf:type rdf:resource="${amlns}UnknownType"/>	
			#set( $reqs = false )
			#set( $reqs = $Scaled.getRequirements() )			
			<amlont:requirements rdf:datatype="${xsdns}string">$reqs</amlont:requirements>
			#set( $reqs = false )
			</owl:NamedIndividual>
		#end
		
		#set( $Scaled = false )
	#end
	## -- macro end
	
	
	#*--------------------
		NO(?) ExternalInterface in InterfaceClass
	----------------------*#
	
	#*--------------------
		NO(?) InternalLink in InterfaceClass 
	----------------------*#	
</rdf:RDF>